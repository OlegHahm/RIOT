From ea913722ecae5bb0a4b5b0bed392f89dd2426b11 Mon Sep 17 00:00:00 2001
From: Oleg Hahm <oleg@hobbykeller.org>
Date: Tue, 14 Jul 2015 20:03:28 +0200
Subject: [PATCH 06/12] RIOTize opentimers

---
 drivers/common/opentimers.c | 27 +++++++++++++++++++++------
 1 file changed, 21 insertions(+), 6 deletions(-)

diff --git a/drivers/common/opentimers.c b/drivers/common/opentimers.c
index bc0659e..e877893 100644
--- a/drivers/common/opentimers.c
+++ b/drivers/common/opentimers.c
@@ -9,9 +9,12 @@ at most MAX_NUM_TIMERS timers.
 
 #include "opendefs.h"
 #include "opentimers.h"
-#include "bsp_timer.h"
+#include "board_ow.h"
 #include "leds.h"
 
+#include "riot.h"
+#include "periph/timer.h"
+
 //=========================== define ==========================================
 
 //=========================== variables =======================================
@@ -22,9 +25,19 @@ opentimers_vars_t opentimers_vars;
 //=========================== prototypes ======================================
 
 void opentimers_timer_callback(void);
+extern void radiotimer_isr(void);
 
 //=========================== public ==========================================
 
+void timers_isr(int channel) {
+   if (channel) {
+      radiotimer_isr();
+   }
+   else {
+      opentimers_timer_callback();
+   }
+}
+
 /**
 \brief Initialize this module.
 
@@ -45,7 +58,7 @@ void opentimers_init(void) {
    }
 
    // set callback for bsp_timers module
-   bsp_timer_set_callback(opentimers_timer_callback);
+   timer_init(OWSN_TIMER, 1, &timers_isr);
 }
 
 /**
@@ -121,9 +134,11 @@ opentimer_id_t opentimers_start(uint32_t duration, timer_type_t type, time_type_
       ) {  
          opentimers_vars.currentTimeout            = opentimers_vars.timersBuf[id].ticks_remaining;
          if (opentimers_vars.running==FALSE) {
-            bsp_timer_reset();
+            timer_reset(OWSN_TIMER);
+            timer_set_absolute(OWSN_TIMER, 0, 0);
+            timer_set_absolute(OWSN_TIMER, 1, 0);
          }
-         bsp_timer_scheduleIn(opentimers_vars.timersBuf[id].ticks_remaining);
+         timer_set(OWSN_TIMER, 0, opentimers_vars.timersBuf[id].ticks_remaining);
       }
 
       opentimers_vars.running                         = TRUE;
@@ -274,7 +289,7 @@ void opentimers_timer_callback(void) {
    if (found==TRUE) {
       // at least one timer pending
       opentimers_vars.currentTimeout = min_timeout;
-      bsp_timer_scheduleIn(opentimers_vars.currentTimeout);
+      timer_set(OWSN_TIMER, 0, opentimers_vars.currentTimeout);
    } else {
       // no more timers pending
       opentimers_vars.running = FALSE;
@@ -355,7 +370,7 @@ void opentimers_sleepTimeCompesation(uint16_t sleepTime)
    if (found==TRUE) {
       // at least one timer pending
       opentimers_vars.currentTimeout = min_timeout;
-      bsp_timer_scheduleIn(opentimers_vars.currentTimeout);
+      timer_set(OWSN_TIMER, 0, opentimers_vars.currentTimeout);
    } else {
       // no more timers pending
       opentimers_vars.running = FALSE;
-- 
2.4.5

